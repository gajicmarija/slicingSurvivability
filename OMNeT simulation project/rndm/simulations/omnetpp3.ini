# Hierarchical Token Bucket Implementation for OMNeT++ & INET Framework
# Copyright (C) 2021 Marija GajiÄ‡ (NTNU), Marcin Bosk (TUM), Susanna Schwarzmann (TU Berlin), Stanislav Lange (NTNU), and Thomas Zinner (NTNU)
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# 
[General]
sim-time-limit=110s
num-rngs = 1
seed-0-mt = 5

output-scalar-file-append = false
record-eventlog = false
#cmdenv-express-mode = false
#cmdenv-output-file = log.txt
#cmdenv-autoflush = true
#**.cmdenv-log-level = warn

*.visualizer.*.interfaceTableVisualizer.displayInterfaceTables = true

**.tcp.typename = "Tcp"
**.udp.typename = "Udp"

**.packetCapacity = 10000

# tcp general settings
**.tcp.advertisedWindow = 65535                     # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)
**.tcp.delayedAcksEnabled = false                    # delayed ACK algorithm (RFC 1122) enabled/disabled
**.tcp.nagleEnabled = true                           # Nagle"s algorithm (RFC 896) enabled/disabled
**.tcp.limitedTransmitEnabled = false                # Limited Transmit algorithm (RFC 3042) enabled/disabled (can be used for TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl)
**.tcp.increasedIWEnabled = false                   # Increased Initial Window (RFC 3390) enabled/disabled
**.tcp.sackSupport = false                           # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)
**.tcp.windowScalingSupport = false                  # Window Scale (RFC 1323) support (header option) (WS will be enabled for a connection if both endpoints support it)
**.tcp.timestampSupport = false                      # Timestamps (RFC 1323) support (header option) (TS will be enabled for a connection if both endpoints support it)
**.tcp.mss = 1452                                    # Maximum Segment Size (RFC 793) (header option)
**.tcp.tcpAlgorithmClass = "TcpReno"                 # TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl/DumbTCP

**.tcp.*.*.vector-recording = true
**.tcp.*.rtt.result-recording-modes = +vector
**.tcp.*.*.result-recording-modes = -vector
**.host*.app*.*.vector-recording = true
**.ppp.*xPk*.vector-recording = true
**.ppp.queue*.vector-recording = true


#**.ppp.*txState*.vector-recording = true
#**.ppp.txState.vector-recording = true
#**.ppp.*.vector-recording = true
#**.ppp.ppp.transmissionStateChanged.vector-recording = true

**.ppp.queue.*.vector-recording = true
**.ppp.queue.*.*.vector-recording = true

#**.router*.ppp[0].vector-recording = true

#**.router1.ppp[2].queue.*.vector-recording = true
#**.router1.ppp[0].queue.queue[*].*.vector-recording = true
#*.router*.ppp[0].vector-recording = true

#**.transmissionState.vector-recording = true
#**.router1.ppp[0].ppp.transmissionState.vector-recording = true
**.vector-recording = false

[Config liteCbaselineTestExampleTopoVisualizer]
description = "Visualize base topology"
network = rndmEvaluations

sim-time-limit=110s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

*.visualizer.*.interfaceTableVisualizer.displayInterfaceTables = false

**.crcMode = "computed"

*.nVID = ${numCli=1,2,10,20,30,40,50,60,70,80} # Number of video clients
*.nLVD = ${numCli} # Number of file download clients
*.nFDO = ${numCli} # Number of file download clients
*.nSSH = ${numCli} # Number of SSH clients
*.nVIP = ${numCli} # Number of VoIP clients
*.ncVP = ${numCli} # Number of VoIP clients
*.ncF = ${numCli} # Number of VoIP clients
*.ncLV = ${numCli} # Number of VoIP clients

**.numApps = 0

[Config liteCbaselineTestTokenQoS_base]
description = "All five applications - base configuration without any resource allocation"
network = rndmEvaluations
sim-time-limit=110s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"
*.host*.numApps = 1

#*.configurator.config = xmldoc("configs/baseQoS/routerConfigBaseHtbTest.xml")

#Critical File Downaload client

*.hostcF[*].hasTcp = true
*.hostcF[*].app[0].typename = "rndm.apps.TcpFileDownloadApp"
*.hostcF[*].app[0].localAddress = ""
*.hostcF[*].app[0].localPort = -1 # port number to listen on
*.hostcF[*].app[0].connectAddress = "servercF" # server address (may be symbolic)
*.hostcF[*].app[0].connectPort = 1042 # port number to connect to
*.hostcF[*].app[0].startTime = uniform(0.01s,10s) # time first session begins
*.hostcF[*].app[0].stopTime = -1s # time of finishing sending, negative values mean forever
*.hostcF[*].app[0].numRequestsPerSession = 1 # number of requests sent per session
*.hostcF[*].app[0].requestLength = 800B # length of a request
*.hostcF[*].app[0].replyLength = 10000KiB # length of a reply
*.hostcF[*].app[0].thinkTime = 0.01s # time gap between requests
*.hostcF[*].app[0].idleInterval = 1s # time gap between sessions
*.hostcF[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect
*.hostcF[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.hostcF[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation

# Critical File download server
*.servercF.hasTcp = true
*.servercF.numApps = 1
*.servercF.app[0].typename = "TcpGenericServerApp"
*.servercF.app[0].localAddress = "" # local address; may be left empty ("")
*.servercF.app[0].localPort = 1042 # localPort number to listen on
*.servercF.app[0].replyDelay = 0s #
*.servercF.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.servercF.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation



# File download client
*.hostFDO[*].hasTcp = true
*.hostFDO[*].app[0].typename = "rndm.apps.TcpFileDownloadApp"
*.hostFDO[*].app[0].localAddress = ""
*.hostFDO[*].app[0].localPort = -1 # port number to listen on
*.hostFDO[*].app[0].connectAddress = "serverFDO" # server address (may be symbolic)
*.hostFDO[*].app[0].connectPort = 1042 # port number to connect to
*.hostFDO[*].app[0].startTime = uniform(0.01s,10s) # time first session begins
*.hostFDO[*].app[0].stopTime = -1s # time of finishing sending, negative values mean forever
*.hostFDO[*].app[0].numRequestsPerSession = 1 # number of requests sent per session
*.hostFDO[*].app[0].requestLength = 800B # length of a request
*.hostFDO[*].app[0].replyLength = 10000KiB # length of a reply
*.hostFDO[*].app[0].thinkTime = 0.01s # time gap between requests
*.hostFDO[*].app[0].idleInterval = 1s # time gap between sessions
*.hostFDO[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect
*.hostFDO[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.hostFDO[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation

# File download server
*.serverFDO.hasTcp = true
*.serverFDO.numApps = 1
*.serverFDO.app[0].typename = "TcpGenericServerApp"
*.serverFDO.app[0].localAddress = "" # local address; may be left empty ("")
*.serverFDO.app[0].localPort = 1042 # localPort number to listen on
*.serverFDO.app[0].replyDelay = 0s #
*.serverFDO.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.serverFDO.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

# Video client
#**.hostVID[*].app[0].video_resolution = "1080"
**.hostVID[*].hasTcp = true
**.hostVID[*].app[0].typename = "rndm.apps.TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("")
**.hostVID[*].app[0].localPort = -1 # port number to listen on
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic)
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to
**.hostVID[*].app[0].dataTransferMode = "object"
**.hostVID[*].app[0].startTime = uniform(0.01s,10s) # time first session begins
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity
**.hostVID[*].app[0].idleInterval = 1s
**.hostVID[*].app[0].requestLength = 200B # length of a request
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session
**.hostVID[*].app[0].thinkTime = 1s # time gap between requests
**.hostVID[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels)
**.hostVID[*].app[0].manifest_size = 100000
**.hostVID[*].app[0].video_buffer_max_length = 30s #40s # buffer max length in seconds
**.hostVID[*].app[0].video_duration = int(uniform(120s,200s))#int(uniform(240s,320s)) # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible"

# Video server
*.serverVID.hasTcp = true
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp"
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("")
*.serverVID.app[0].localPort = 1042 # localPort number to listen on
*.serverVID.app[0].replyDelay = 0s #
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.serverVID.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

#Critical Live Video client
**.hostcLV[*].hasTcp = true
**.hostcLV[*].app[0].typename = "rndm.apps.TCPLiveVideoStreamCliAppLite"
**.hostcLV[*].app[0].localAddress = "" # may be left empty ("")
**.hostcLV[*].app[0].localPort = -1 # port number to listen on
**.hostcLV[*].app[0].connectAddress = "servercLV" # server address (may be symbolic)
**.hostcLV[*].app[0].connectPort = 1043 # port number to connect to
**.hostcLV[*].app[0].dataTransferMode = "object"
**.hostcLV[*].app[0].startTime = uniform(0.01s,10s) # time first session begins
**.hostcLV[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity
**.hostcLV[*].app[0].idleInterval = 1s
**.hostcLV[*].app[0].requestLength = 200B # length of a request
**.hostcLV[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect
**.hostcLV[*].app[0].numRequestsPerSession = 1 # number of requests sent per session
**.hostcLV[*].app[0].thinkTime = 1s # time gap between requests
**.hostcLV[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels)
**.hostcLV[*].app[0].manifest_size = 100000
**.hostcLV[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds
**.hostcLV[*].app[0].video_duration = int(uniform(60s,70s)) # video length in seconds
**.hostcLV[*].app[0].segment_length = 1s # video segment length in seconds
**.hostcLV[*].app[0].useFlexibleBitrate = "flexible"
**.hostcLV[*].app[0].video_type = "live"
**.hostcLV[*].app[0].delay_threshold = 4
**.hostcLV[*].app[0].speedup_rate = 1.05

# Critical Live Video server
*.servercLV.hasTcp = true
*.servercLV.numApps = 1
*.servercLV.app[0].typename = "TcpGenericServerApp"
*.servercLV.app[0].localAddress = "" # local address; may be left empty ("")
*.servercLV.app[0].localPort = 1043 # localPort number to listen on
*.servercLV.app[0].replyDelay = 0s #
*.servercLV.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.servercLV.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

# Live Video client
**.hostLVD[*].hasTcp = true
**.hostLVD[*].app[0].typename = "rndm.apps.TCPLiveVideoStreamCliAppLite"
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("")
**.hostLVD[*].app[0].localPort = -1 # port number to listen on
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic)
**.hostLVD[*].app[0].connectPort = 1043 # port number to connect to
**.hostLVD[*].app[0].dataTransferMode = "object"
**.hostLVD[*].app[0].startTime = uniform(0.01s,10s) # time first session begins
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity
**.hostLVD[*].app[0].idleInterval = 1s
**.hostLVD[*].app[0].requestLength = 200B # length of a request
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session
**.hostLVD[*].app[0].thinkTime = 1s # time gap between requests
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels)
**.hostLVD[*].app[0].manifest_size = 100000
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds
**.hostLVD[*].app[0].video_duration = int(uniform(60s,70s)) # video length in seconds
**.hostLVD[*].app[0].segment_length = 1s # video segment length in seconds
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible"
**.hostLVD[*].app[0].video_type = "live"
**.hostLVD[*].app[0].delay_threshold = 4
**.hostLVD[*].app[0].speedup_rate = 1.05

# Live Video server
*.serverLVD.hasTcp = true
*.serverLVD.numApps = 1
*.serverLVD.app[0].typename = "TcpGenericServerApp"
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1043 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s #
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

# Remote Shell Client
**.hostSSH[*].hasTcp = true
**.hostSSH[*].app[0].typename = "rndm.apps.TcpSimpleSshAppV2lite"
**.hostSSH[*].app[0].localAddress = "" # local address or empty ("")
**.hostSSH[*].app[0].localPort = -1 # local port number
**.hostSSH[*].app[0].connectAddress = "serverSSH" # server address (may be symbolic)
**.hostSSH[*].app[0].connectPort = 22  # port number to connect to
**.hostSSH[*].app[0].startTime = uniform(0.01s,10s) # time first session begins
**.hostSSH[*].app[0].stopTime = -1s # time of finishing sending, negative values mean forever
**.hostSSH[*].app[0].numCommands = 1 # user types this many commands in a session
**.hostSSH[*].app[0].commandLength = 10B # commands are this many characters (plus Enter)
**.hostSSH[*].app[0].keyPressDelay = 0.05s # delay between keypresses
**.hostSSH[*].app[0].commandOutputLength = 500B # commands produce this much output
**.hostSSH[*].app[0].thinkTime = 1s # user waits this much before starting to type new command
**.hostSSH[*].app[0].idleInterval = 1s # time gap between sessions
**.hostSSH[*].app[0].reconnectInterval = 1s # if connection breaks, user waits this much before trying to reconnect
**.hostSSH[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
**.hostSSH[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation

# SSH server
*.serverSSH.hasTcp = true
*.serverSSH.numApps = 1
*.serverSSH.app[*].typename = "TcpGenericServerApp"
*.serverSSH.app[*].localAddress = "" # local address; may be left empty ("")
*.serverSSH.app[*].localPort = 22 # localPort number to listen on
*.serverSSH.app[*].replyDelay = 0s #
*.serverSSH.app[*].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.serverSSH.app[*].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

# Critical VoIP receiver
**.hostcVP[*].hasUdp = true
**.hostcVP[*].app[0].typename = "SimpleVoipReceiver"
**.hostcVP[*].app[0].localPort = 2000
**.hostcVP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostcVP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostcVP[*].app[0].emodelA = 5 # Advantage factor
**.hostcVP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostcVP[*].app[0].playoutDelay = 20ms # initial delay for beginning playout after receiving the first packet
**.hostcVP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostcVP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostcVP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# Critical VoIP sender
**.servercVP.hasUdp = true
**.servercVP.numApps = parent.ncVP
**.servercVP.app[*].typename = "SimpleVoipSender"
**.servercVP.app[*].localPort = -1
**.servercVP.app[*].destPort = 2000
**.servercVP.app[*].destAddress = "hostcVP[" + string(index) + "]"
**.servercVP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.servercVP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.servercVP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.servercVP.app[*].packetizationInterval = 20ms # interval between sending voice packets
**.servercVP.app[*].startTime = uniform(0.01s,10s) # time of start sending
**.servercVP.app[*].stopTime = -1s # time of end of sending, -1 means forever

# VoIP receiver
**.hostVIP[*].hasUdp = true
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver"
**.hostVIP[*].app[0].localPort = 2000
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostVIP[*].app[0].playoutDelay = 20ms # initial delay for beginning playout after receiving the first packet
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# VoIP sender
**.serverVIP.hasUdp = true
**.serverVIP.numApps = parent.nVIP
**.serverVIP.app[*].typename = "SimpleVoipSender"
**.serverVIP.app[*].localPort = -1
**.serverVIP.app[*].destPort = 2000
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]"
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets
**.serverVIP.app[*].startTime = uniform(0.01s,10s) # time of start sending
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever


[Config noDisaster]
description = "Config noDisaster"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/noDisasterroutingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 5
*.ncF = 5
*.ncLV = 5

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/noDisaster_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 1046e6 bps
**.connFIX0.delay = 40ms


[Config disasterWOSWOP]
description = "Config noDisaster"
extends = liteCbaselineTestTokenQoS_base
**.ppp.queue.packetCapacity = -1
*.configurator.config = xmldoc("configs/baseQoS/noDisasterroutingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 20



[Config disaster8S10]
description = "Config disaster8S10"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/disaster8S10routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/disaster8S10_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 100e6 bps
**.connFIX0.delay = 40ms

[Config disaster8S20]
description = "Config disaster8S20"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/disaster8S20routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/disaster8S20_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 200e6 bps
**.connFIX0.delay = 40ms

[Config disaster8S30]
description = "Config disaster8S30"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/disaster8S30routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/disaster8S30_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 300e6 bps
**.connFIX0.delay = 40ms

[Config disaster8S40]
description = "Config disaster8S40"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/disaster8S40routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/disaster8S40_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 400e6 bps
**.connFIX0.delay = 40ms

[Config disaster8S50]
description = "Config disaster8S50"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/disaster8S50routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/disaster8S50_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 500e6 bps
**.connFIX0.delay = 40ms

[Config disaster8S60]
description = "Config disaster8S60"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/disaster8S60routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/disaster8S60_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 600e6 bps
**.connFIX0.delay = 40ms

[Config disaster8S70]
description = "Config disaster8S70"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/disaster8S70routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/disaster8S70_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 700e6 bps
**.connFIX0.delay = 40ms

[Config disaster8S80]
description = "Config disaster8S80"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/disaster8S80routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/disaster8S80_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 800e6 bps
**.connFIX0.delay = 40ms

[Config disaster8S90]
description = "Config disaster8S90"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/disaster8S90routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/disaster8S90_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 900e6 bps
**.connFIX0.delay = 40ms
[Config disaster2S10]
description = "Config disaster2S10"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/disaster2S10routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 2 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/disaster2S10_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.2*.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*" || ipv4.srcAddress.str() =~ "10.6.*.*" || ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.2*.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*" || ipv4.destAddress.str() =~ "10.6.*.*" || ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 100e6 bps
**.connFIX0.delay = 40ms

[Config disaster2S20]
description = "Config disaster2S20"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/disaster2S20routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 2 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/disaster2S20_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.2*.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*" || ipv4.srcAddress.str() =~ "10.6.*.*" || ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.2*.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*" || ipv4.destAddress.str() =~ "10.6.*.*" || ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 200e6 bps
**.connFIX0.delay = 40ms

[Config disaster2S30]
description = "Config disaster2S30"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/disaster2S30routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 2 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/disaster2S30_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.2*.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*" || ipv4.srcAddress.str() =~ "10.6.*.*" || ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.2*.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*" || ipv4.destAddress.str() =~ "10.6.*.*" || ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 300e6 bps
**.connFIX0.delay = 40ms

[Config disaster2S40]
description = "Config disaster2S40"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/disaster2S40routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 2 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/disaster2S40_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.2*.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*" || ipv4.srcAddress.str() =~ "10.6.*.*" || ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.2*.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*" || ipv4.destAddress.str() =~ "10.6.*.*" || ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 400e6 bps
**.connFIX0.delay = 40ms

[Config disaster2S50]
description = "Config disaster2S50"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/disaster2S50routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 2 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/disaster2S50_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.2*.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*" || ipv4.srcAddress.str() =~ "10.6.*.*" || ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.2*.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*" || ipv4.destAddress.str() =~ "10.6.*.*" || ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 500e6 bps
**.connFIX0.delay = 40ms

[Config disaster2S60]
description = "Config disaster2S60"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/disaster2S60routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 2 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/disaster2S60_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.2*.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*" || ipv4.srcAddress.str() =~ "10.6.*.*" || ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.2*.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*" || ipv4.destAddress.str() =~ "10.6.*.*" || ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 600e6 bps
**.connFIX0.delay = 40ms

[Config disaster2S70]
description = "Config disaster2S70"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/disaster2S70routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 2 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/disaster2S70_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.2*.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*" || ipv4.srcAddress.str() =~ "10.6.*.*" || ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.2*.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*" || ipv4.destAddress.str() =~ "10.6.*.*" || ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 700e6 bps
**.connFIX0.delay = 40ms

[Config disaster2S80]
description = "Config disaster2S80"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/disaster2S80routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 2 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/disaster2S80_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.2*.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*" || ipv4.srcAddress.str() =~ "10.6.*.*" || ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.2*.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*" || ipv4.destAddress.str() =~ "10.6.*.*" || ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 800e6 bps
**.connFIX0.delay = 40ms

[Config disaster2S90]
description = "Config disaster2S90"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/disaster2S90routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 2 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/disaster2S90_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.2*.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*" || ipv4.srcAddress.str() =~ "10.6.*.*" || ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.2*.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*" || ipv4.destAddress.str() =~ "10.6.*.*" || ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 900e6 bps
**.connFIX0.delay = 40ms

[Config Ndisaster2S20]
description = "Config Ndisaster2S20"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/Ndisaster2S20routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 2 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/Ndisaster2S20_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.2*.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*" || ipv4.srcAddress.str() =~ "10.6.*.*" || ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.2*.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*" || ipv4.destAddress.str() =~ "10.6.*.*" || ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 260e6 bps
**.connFIX0.delay = 40ms

[Config Ndisaster2S50]
description = "Config Ndisaster2S50"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/Ndisaster2S50routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 2 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/Ndisaster2S50_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.2*.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*" || ipv4.srcAddress.str() =~ "10.6.*.*" || ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.2*.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*" || ipv4.destAddress.str() =~ "10.6.*.*" || ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 650e6 bps
**.connFIX0.delay = 40ms

[Config Ndisaster2S80]
description = "Config Ndisaster2S80"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/Ndisaster2S80routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 2 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/Ndisaster2S80_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.2*.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*" || ipv4.srcAddress.str() =~ "10.6.*.*" || ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.2*.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*" || ipv4.destAddress.str() =~ "10.6.*.*" || ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 1040e6 bps
**.connFIX0.delay = 40ms

[Config NnoDisaster]
description = "Config NnoDisaster"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/NnoDisasterroutingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 5
*.ncF = 5
*.ncLV = 5

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/NnoDisaster_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 1297e6 bps
**.connFIX0.delay = 40ms

[Config Ndisaster8S10]
description = "Config Ndisaster8S10"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/Ndisaster8S10routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 2 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/Ndisaster8S10_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.2*.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*" || ipv4.srcAddress.str() =~ "10.6.*.*" || ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.2*.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*" || ipv4.destAddress.str() =~ "10.6.*.*" || ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 130e6 bps
**.connFIX0.delay = 40ms

[Config Ndisaster8S20]
description = "Config Ndisaster8S20"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/Ndisaster8S20routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 2 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/Ndisaster8S20_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.2*.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*" || ipv4.srcAddress.str() =~ "10.6.*.*" || ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.2*.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*" || ipv4.destAddress.str() =~ "10.6.*.*" || ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 260e6 bps
**.connFIX0.delay = 40ms


[Config Ndisaster8S50]
description = "Config Ndisaster8S50"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/Ndisaster8S50routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 2 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/Ndisaster8S50_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.2*.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*" || ipv4.srcAddress.str() =~ "10.6.*.*" || ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.2*.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*" || ipv4.destAddress.str() =~ "10.6.*.*" || ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 650e6 bps
**.connFIX0.delay = 40ms

[Config Ndisaster8S80]
description = "Config Ndisaster8S80"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/Ndisaster8S80routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 2 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/Ndisaster8S80_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.2*.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*" || ipv4.srcAddress.str() =~ "10.6.*.*" || ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.2*.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*" || ipv4.destAddress.str() =~ "10.6.*.*" || ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 1040e6 bps
**.connFIX0.delay = 40ms

[Config Ndisaster8S90]
description = "Config Ndisaster8S90"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/Ndisaster8S90routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 2 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/Ndisaster8S90_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.2*.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*" || ipv4.srcAddress.str() =~ "10.6.*.*" || ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.2*.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*" || ipv4.destAddress.str() =~ "10.6.*.*" || ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 1170e6 bps
**.connFIX0.delay = 40ms

[Config Ndisaster2S10]
description = "Config Ndisaster2S10"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/Ndisaster2S10routingtest1.xml")
*.nVIP = 400
*.nLVD = 260
*.nVID = 485
*.nFDO = 50
*.nSSH = 100
*.ncVP = 100
*.ncF = 50
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 2 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/Ndisaster2S10_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.2*.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*" || ipv4.srcAddress.str() =~ "10.6.*.*" || ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.2*.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*" || ipv4.destAddress.str() =~ "10.6.*.*" || ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 130e6 bps
**.connFIX0.delay = 40ms



[Config bigFD1GiBTCP]
description = "Config zeroNoDisaster"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/zeroNoDisasterroutingtest1.xml")
*.nVIP = 1
*.nLVD = 1
*.nVID = 5
*.nFDO = 1
*.nSSH = 1
*.ncVP = 1
*.ncF = 1
*.ncLV = 1

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/samePrio.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 1000000000 bps
**.connFIX0.delay = 40ms


[Config cnsm]
description = "Config cnsm"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/cnsmroutingtest1.xml")
*.nVIP = 35
*.nLVD = 28
*.nVID = 45
*.nFDO = 2
*.nSSH = 10
*.ncVP = 5
*.ncF = 3
*.ncLV = 5

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/cnsm_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 151570000 bps
**.connFIX0.delay = 10ms

[Config cnsm10VoDFix]
description = "Config cnsm"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/cnsm10routingtest1.xml")
*.nVIP = 350
*.nLVD = 280
*.nVID = 450
*.nFDO = 20
*.nSSH = 100
*.ncVP = 50
*.ncF = 30
*.ncLV = 50

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/cnsm10_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 1520e6 bps
**.connFIX0.delay = 400ns

[Config cnsmVOD2x]
description = "Config cnsmVOD2x"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/cnsmVOD2xroutingtest1.xml")
*.nVIP = 1
*.nLVD = 1
*.nVID = 1
*.nFDO = 1
*.nSSH = 1
*.ncVP = 1
*.ncF = 1
*.ncLV = 1

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/cnsmVOD2x_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 2060e6 bps
**.connFIX0.delay = 400ns

[Config finalNoDisaster]
description = "Config finalNoDisaster"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/finalNoDisasterroutingtest1.xml")
*.nVIP = 350
*.nLVD = 280
*.nVID = 450
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 100

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/finalNoDisaster_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 1800e6 bps
**.connFIX0.delay = 40ms



[Config finalNoDisasterHalf]
description = "Config finalNoDisaster"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/finalNoDisasterroutingtest1.xml")
*.nVIP = 175
*.nLVD = 140
*.nVID = 225
*.nFDO = 10
*.nSSH = 50
*.ncVP = 50
*.ncF = 30
*.ncLV = 50

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/finalNoDisaster_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 1800e6 bps
**.connFIX0.delay = 400ns


[Config halfVoDLVRate]
description = "Config finalNoDisaster"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/finalNoDisasterroutingtest1.xml")
*.nVIP = 350
*.nLVD = 140
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 100

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/finalNoDisasterLinkRate_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 1800e6 bps
**.connFIX0.delay = 400ns

[Config testLVD5]
description = "Config testLVD"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/testLVDroutingtest1.xml")
*.nVIP = 1
*.nLVD = 20
*.nVID = 1
*.nFDO = 1
*.nSSH = 1
*.ncVP = 1
*.ncF = 1
*.ncLV = 10

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/testLVD2_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 1800e6 bps
**.connFIX0.delay = 400ns


[Config testLVD8040ns]
description = "Config testLVD"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/testLVDroutingtest1.xml")
*.nVIP = 350
*.nLVD = 80
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 40

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/testLVD3_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 1800e6 bps
**.connFIX0.delay = 400ns



[Config delay10ms]
description = "Config testLVD"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/testLVDroutingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/testLVD2_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 1800e6 bps
**.connFIX0.delay = 10ms

[Config scenario1NDlive60sLive200]
description = "Config scenario1ND"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario1NDroutingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario1NDtest_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 1046.2e6 bps
**.connFIX0.delay = 10ms




[Config NDstarttime10sLive200]
description = "Config 1NDstarttime10s"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario1NDroutingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario1NDtest_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 1046.2e6 bps
**.connFIX0.delay = 10ms

[Config NDstarttime20sLive200]
description = "Config 1NDstarttime10s"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario1NDroutingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario1NDtest_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 1046.2e6 bps
**.connFIX0.delay = 10ms




[Config scenario1NDlive60sLive200video675]
description = "Config scenario1ND"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario1NDroutingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/video3_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 1181.1e6 bps
**.connFIX0.delay = 10ms


[Config half1NDlive60sLive200video675]
description = "Config scenario1ND"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario1NDroutingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/half_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 1181.1e6 bps
**.connFIX0.delay = 10ms



[Config scenario2D8S20]
description = "Config scenario2D8S20"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario2D8S20routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario2D8S20_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 200e6 bps
**.connFIX0.delay = 10ms

[Config scenario2D8S50]
description = "Config scenario2D8S50"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario2D8S50routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario2D8S50_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]



**.connFIX0.datarate = 500e6 bps
**.connFIX0.delay = 10ms

[Config scenario2D8S80]
description = "Config scenario2D8S80"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario2D8S80routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario2D8S80_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]



**.connFIX0.datarate = 800e6 bps
**.connFIX0.delay = 10ms

onnFIX0.delay = 10ms

[Config scenario2D8S1]
description = "Config scenario2D8S1"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario2D8S1routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario2D8S1_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]



**.connFIX0.datarate = 10e6 bps
**.connFIX0.delay = 10ms

[Config scenario2D8S5]
description = "Config scenario2D8S5"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario2D8S5routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario2D8S5_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]



**.connFIX0.datarate = 50e6 bps
**.connFIX0.delay = 10ms

[Config scenario3D8SG1]
description = "Config scenario3D8SG1"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario3D8SG1routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario3D8SG1_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 10e6 bps
**.connFIX0.delay = 10ms

[Config scenario3D8SG5]
description = "Config scenario3D8SG5"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario3D8SG5routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario3D8SG5_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 50e6 bps
**.connFIX0.delay = 10ms

[Config scenario3D8SG20]
description = "Config scenario3D8SG20"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario3D8SG20routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario3D8SG20_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 200e6 bps
**.connFIX0.delay = 10ms

[Config scenario3D8SG50]
description = "Config scenario3D8SG50"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario3D8SG50routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8 
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario3D8SG50_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 500e6 bps
**.connFIX0.delay = 10ms

[Config scenario3D8SG80]
description = "Config scenario3D8SG80"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario3D8SG80routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario3D8SG80_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]


**.connFIX0.datarate = 800e6 bps
**.connFIX0.delay = 10ms




[Config Ddisaster2S]
description = "Config Ddisaster2S1"
extends = liteCbaselineTestTokenQoS_base
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25
*.configurator.config = xmldoc("configs/baseQoS/Ddisaster2S1routingtest1.xml")


*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 4
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/Ddisaster2S1_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0

*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~  "10.1*.0.0"), expr(ipv4.srcAddress.str() =~  "10.2*.0.0"), expr(ipv4.srcAddress.str() =~  "10.3*.0.0"), expr(ipv4.srcAddress.str() =~  "10.4*.0.0")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~  "10.1*.0.0"), expr(ipv4.destAddress.str() =~  "10.2*.0.0"), expr(ipv4.destAddress.str() =~  "10.3*.0.0"), expr(ipv4.srcAddress.str() =~  "10.4*.0.0") ]



**.connFIX0.datarate = 1000e6 bps
**.connFIX0.delay = 10ms

[Config Ddisaster2S1aa]
description = "Config Ddisaster2S1"
extends = liteCbaselineTestTokenQoS_base
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25
*.configurator.config = xmldoc("configs/baseQoS/Ddisaster2S1routingtest1.xml")


*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 4
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/Ddisaster2S1_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0

*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~  "10.1*.0.0"), expr(ipv4.srcAddress.str() =~  "10.2*.0.0"), expr(ipv4.srcAddress.str() =~  "10.3*.0.0"), expr(ipv4.srcAddress.str() =~  "10.4*.0.0")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~  "10.1*.0.0"), expr(ipv4.destAddress.str() =~  "10.2*.0.0"), expr(ipv4.destAddress.str() =~  "10.3*.0.0"), expr(ipv4.srcAddress.str() =~  "10.4*.0.0") ]

**.connFIX0.datarate = 20000000e6 bps
**.connFIX0.delay = 10ms



[Config delete1]
description = "Config delete1"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/delete1routingtest1.xml")
*.ncBW = 1
*.nncBW = 1
*.ncDel = 1
*.nnCDel = 1

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 4
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/delete1_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~  "10.1*.*.*"),expr(ipv4.srcAddress.str() =~  "10.2*.*.*"),expr(ipv4.srcAddress.str() =~  "10.3*.*.*"),expr(ipv4.srcAddress.str() =~  "10.4*.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~  "10.1*.*.*"),expr(ipv4.destAddress.str() =~  "10.2*.*.*"),expr(ipv4.destAddress.str() =~  "10.3*.*.*"),expr(ipv4.destAddress.str() =~  "10.4*.*.*")]

**.connFIX0.datarate = 20000000e6 bps
**.connFIX0.delay = 10ms


[Config scenario4D2S1]
description = "Config scenario4D2S1"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario4D2S1routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 4
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario4D2S1_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~  "10.1*.*.*"),expr(ipv4.srcAddress.str() =~  "10.2*.*.*"),expr(ipv4.srcAddress.str() =~  "10.3*.*.*"),expr(ipv4.srcAddress.str() =~  "10.4*.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~  "10.1*.*.*"),expr(ipv4.destAddress.str() =~  "10.2*.*.*"),expr(ipv4.destAddress.str() =~  "10.3*.*.*"),expr(ipv4.destAddress.str() =~  "10.4*.*.*")]

**.connFIX0.datarate = 10e6 bps
**.connFIX0.delay = 10ms

[Config scenario4D2S5]
description = "Config scenario4D2S5"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario4D2S5routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 4
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario4D2S5_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~  "10.1*.*.*"),expr(ipv4.srcAddress.str() =~  "10.2*.*.*"),expr(ipv4.srcAddress.str() =~  "10.3*.*.*"),expr(ipv4.srcAddress.str() =~  "10.4*.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~  "10.1*.*.*"),expr(ipv4.destAddress.str() =~  "10.2*.*.*"),expr(ipv4.destAddress.str() =~  "10.3*.*.*"),expr(ipv4.destAddress.str() =~  "10.4*.*.*")]

**.connFIX0.datarate = 50e6 bps
**.connFIX0.delay = 10ms

[Config scenario4D2S20]
description = "Config scenario4D2S20"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario4D2S20routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 4
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario4D2S20_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~  "10.1*.*.*"),expr(ipv4.srcAddress.str() =~  "10.2*.*.*"),expr(ipv4.srcAddress.str() =~  "10.3*.*.*"),expr(ipv4.srcAddress.str() =~  "10.4*.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~  "10.1*.*.*"),expr(ipv4.destAddress.str() =~  "10.2*.*.*"),expr(ipv4.destAddress.str() =~  "10.3*.*.*"),expr(ipv4.destAddress.str() =~  "10.4*.*.*")]

**.connFIX0.datarate = 200e6 bps
**.connFIX0.delay = 10ms

[Config scenario4D2S50]
description = "Config scenario4D2S50"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario4D2S50routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 4
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario4D2S50_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~  "10.1*.*.*"),expr(ipv4.srcAddress.str() =~  "10.2*.*.*"),expr(ipv4.srcAddress.str() =~  "10.3*.*.*"),expr(ipv4.srcAddress.str() =~  "10.4*.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~  "10.1*.*.*"),expr(ipv4.destAddress.str() =~  "10.2*.*.*"),expr(ipv4.destAddress.str() =~  "10.3*.*.*"),expr(ipv4.destAddress.str() =~  "10.4*.*.*")]

**.connFIX0.datarate = 500e6 bps
**.connFIX0.delay = 10ms

[Config scenario4D2S80]
description = "Config scenario4D2S80"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario4D2S80routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 4
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario4D2S80_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~  "10.1*.*.*"),expr(ipv4.srcAddress.str() =~  "10.2*.*.*"),expr(ipv4.srcAddress.str() =~  "10.3*.*.*"),expr(ipv4.srcAddress.str() =~  "10.4*.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~  "10.1*.*.*"),expr(ipv4.destAddress.str() =~  "10.2*.*.*"),expr(ipv4.destAddress.str() =~  "10.3*.*.*"),expr(ipv4.destAddress.str() =~  "10.4*.*.*")]

**.connFIX0.datarate = 800e6 bps
**.connFIX0.delay = 10ms

[Config scenario4D2S100]
description = "Config scenario4D2S100"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario4D2S100routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 4
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario4D2S100_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~  "10.1*.*.*"),expr(ipv4.srcAddress.str() =~  "10.2*.*.*"),expr(ipv4.srcAddress.str() =~  "10.3*.*.*"),expr(ipv4.srcAddress.str() =~  "10.4*.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~  "10.1*.*.*"),expr(ipv4.destAddress.str() =~  "10.2*.*.*"),expr(ipv4.destAddress.str() =~  "10.3*.*.*"),expr(ipv4.destAddress.str() =~  "10.4*.*.*")]

**.connFIX0.datarate = 1000e6 bps
**.connFIX0.delay = 10ms




[Config scenario4D2Sfixed1]
description = "Config scenario4D2Sfixed1"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario4D2Sfixed1routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 4
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = 10000
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario4D2Sfixed1_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~  "10.1*.*.*"),expr(ipv4.srcAddress.str() =~  "10.2*.*.*"),expr(ipv4.srcAddress.str() =~  "10.3*.*.*"),expr(ipv4.srcAddress.str() =~  "10.4*.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~  "10.1*.*.*"),expr(ipv4.destAddress.str() =~  "10.2*.*.*"),expr(ipv4.destAddress.str() =~  "10.3*.*.*"),expr(ipv4.destAddress.str() =~  "10.4*.*.*")]

**.connFIX0.datarate = 10e6 bps
**.connFIX0.delay = 10ms

[Config scenario4D2Sfixed5]
description = "Config scenario4D2Sfixed5"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario4D2Sfixed5routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 4
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario4D2Sfixed5_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~  "10.1*.*.*"),expr(ipv4.srcAddress.str() =~  "10.2*.*.*"),expr(ipv4.srcAddress.str() =~  "10.3*.*.*"),expr(ipv4.srcAddress.str() =~  "10.4*.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~  "10.1*.*.*"),expr(ipv4.destAddress.str() =~  "10.2*.*.*"),expr(ipv4.destAddress.str() =~  "10.3*.*.*"),expr(ipv4.destAddress.str() =~  "10.4*.*.*")]

**.connFIX0.datarate = 50e6 bps
**.connFIX0.delay = 10ms

[Config scenario4D2Sfixed20]
description = "Config scenario4D2Sfixed20"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario4D2Sfixed20routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 4
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario4D2Sfixed20_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~  "10.1*.*.*"),expr(ipv4.srcAddress.str() =~  "10.2*.*.*"),expr(ipv4.srcAddress.str() =~  "10.3*.*.*"),expr(ipv4.srcAddress.str() =~  "10.4*.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~  "10.1*.*.*"),expr(ipv4.destAddress.str() =~  "10.2*.*.*"),expr(ipv4.destAddress.str() =~  "10.3*.*.*"),expr(ipv4.destAddress.str() =~  "10.4*.*.*")]

**.connFIX0.datarate = 200e6 bps
**.connFIX0.delay = 10ms

[Config scenario4D2Sfixed50]
description = "Config scenario4D2Sfixed50"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario4D2Sfixed50routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 4
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario4D2Sfixed50_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~  "10.1*.*.*"),expr(ipv4.srcAddress.str() =~  "10.2*.*.*"),expr(ipv4.srcAddress.str() =~  "10.3*.*.*"),expr(ipv4.srcAddress.str() =~  "10.4*.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~  "10.1*.*.*"),expr(ipv4.destAddress.str() =~  "10.2*.*.*"),expr(ipv4.destAddress.str() =~  "10.3*.*.*"),expr(ipv4.destAddress.str() =~  "10.4*.*.*")]

**.connFIX0.datarate = 500e6 bps
**.connFIX0.delay = 10ms

[Config scenario4D2Sfixed80]
description = "Config scenario4D2Sfixed80"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario4D2Sfixed80routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 4
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario4D2Sfixed80_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~  "10.1*.*.*"),expr(ipv4.srcAddress.str() =~  "10.2*.*.*"),expr(ipv4.srcAddress.str() =~  "10.3*.*.*"),expr(ipv4.srcAddress.str() =~  "10.4*.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~  "10.1*.*.*"),expr(ipv4.destAddress.str() =~  "10.2*.*.*"),expr(ipv4.destAddress.str() =~  "10.3*.*.*"),expr(ipv4.destAddress.str() =~  "10.4*.*.*")]

**.connFIX0.datarate = 800e6 bps
**.connFIX0.delay = 10ms

[Config scenario4D2Sfixed100]
description = "Config scenario4D2Sfixed100"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario4D2Sfixed100routingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 4
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario4D2Sfixed100_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~  "10.1*.*.*"),expr(ipv4.srcAddress.str() =~  "10.2*.*.*"),expr(ipv4.srcAddress.str() =~  "10.3*.*.*"),expr(ipv4.srcAddress.str() =~  "10.4*.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~  "10.1*.*.*"),expr(ipv4.destAddress.str() =~  "10.2*.*.*"),expr(ipv4.destAddress.str() =~  "10.3*.*.*"),expr(ipv4.destAddress.str() =~  "10.4*.*.*")]

**.connFIX0.datarate = 1000e6 bps
**.connFIX0.delay = 10ms




[Config noDisaster10soffset]
description = "Config 1NDstarttime10s"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario1NDroutingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario1NDtest_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 1046.2e6 bps

[Config noDisaster5soffset]
description = "Config 1NDstarttime10s"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario1NDroutingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario1NDtest_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 1046.2e6 bps

[Config noDisaster10soffset20percent]
description = "Config 1NDstarttime10s"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/scenario1NDroutingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 20
*.nSSH = 100
*.ncVP = 100
*.ncF = 60
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/scenario1NDtest_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 1046.2e6 bps


[Config S1NoDisasterSW210sLV2]
description = "Config S1NoDisaster"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/S1NoDisasterroutingtest1.xml")
*.nVIP = 350
*.nLVD = 50
*.nVID = 225
*.nFDO = 60
*.nSSH = 100
*.ncVP = 100
*.ncF = 20
*.ncLV = 25

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/S1NoDisaster_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 996200000 bps
**.connFIX0.delay = 10ms

[Config S1NDW210sVIDLVD4mbps]
description = "Config S1NoDisaster"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/S1NoDisasterroutingtest1.xml")
*.nVIP = 350
*.nLVD = 37
*.nVID = 135
*.nFDO = 60
*.nSSH = 100
*.ncVP = 100
*.ncF = 20
*.ncLV = 18

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/S1NoDisaster_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 996200000 bps
**.connFIX0.delay = 10ms

[Config ND10sVIDLVD4MlongLV]
description = "Config S1NoDisaster"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/S1NoDisasterroutingtest1.xml")
*.nVIP = 350
*.nLVD = 37
*.nVID = 135
*.nFDO = 60
*.nSSH = 100
*.ncVP = 100
*.ncF = 20
*.ncLV = 18

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 8
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/S1NoDisaster_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*"), expr(ipv4.srcAddress.str() =~ "10.5.*.*"), expr(ipv4.srcAddress.str() =~ "10.6.*.*"), expr(ipv4.srcAddress.str() =~ "10.7.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*"), expr(ipv4.destAddress.str() =~ "10.5.*.*"), expr(ipv4.destAddress.str() =~ "10.6.*.*"), expr(ipv4.destAddress.str() =~ "10.7.*.*")]

**.connFIX0.datarate = 996200000 bps
**.connFIX0.delay = 10ms
